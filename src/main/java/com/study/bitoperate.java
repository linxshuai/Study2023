package com.study;

public class bitoperate {
    public static void main(String[] args) {
        System.out.println(2&3);
        // 00000000 00000000 00000000 00000010
        // 00000000 00000000 00000000 00000011
        // 00000000 00000000 00000000 00000010  所以是2
        System.out.println(2|3);
        // 00000000 00000000 00000000 00000010
        // 00000000 00000000 00000000 00000011
        // 00000000 00000000 00000000 00000011  所以是3
        System.out.println(2^3);//异或不一样取1
        // 00000000 00000000 00000000 00000010
        // 00000000 00000000 00000000 00000011
        // 00000000 00000000 00000000 00000001 所以是1
        System.out.println(~3); //所有负整数的按位取反是其本身+1的绝对值 零的按位取反是 -1
        // 00000000 00000000 00000000 00000011  首先将数字3转换为32位的二进制数
        // 11111111 11111111 11111111 11111100  原码取反，说明这是一个负数
        // 11111111 11111111 11111111 11111011  负数再取反
        // 10000000 00000000 00000000 00000100  补码=反码+1
        System.out.println("--------------");
        int i =4>>2;
        System.out.println(i);
        //00000000 00000000 00000000 00000100
        //00000000 00000000 00000000 00000001
        int j =4<<2;
        System.out.println(j);
        //00000000 00000000 00000000 00000100
        //00000000 00000000 00000000 00010000



    }
}
